{"ast":null,"code":"import _classCallCheck from \"/Users/riandasilva/vetreria/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/riandasilva/vetreria/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/riandasilva/vetreria/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/riandasilva/vetreria/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as THREE from 'three';\n\nvar _instanceLocalMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nvar _instanceWorldMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nvar _instanceIntersects = [];\n\nvar _mesh = /*@__PURE__*/new THREE.Mesh();\n\nvar Position = /*#__PURE__*/function (_THREE$Group) {\n  _inherits(Position, _THREE$Group);\n\n  var _super = _createSuper(Position);\n\n  function Position() {\n    var _this;\n\n    _classCallCheck(this, Position);\n\n    _this = _super.call(this);\n    _this.color = new THREE.Color('white');\n    _this.instance = {\n      current: undefined\n    };\n    _this.instanceKey = {\n      current: undefined\n    };\n    return _this;\n  } // This will allow the virtual instance have bounds\n\n\n  _createClass(Position, [{\n    key: \"raycast\",\n    // And this will allow the virtual instance to receive events\n    value: function raycast(raycaster, intersects) {\n      var parent = this.instance.current;\n      if (!parent) return;\n      if (!parent.geometry || !parent.material) return;\n      _mesh.geometry = parent.geometry;\n      var matrixWorld = parent.matrixWorld;\n      var instanceId = parent.userData.instances.indexOf(this.instanceKey); // If the instance wasn't found or exceeds the parents draw range, bail out\n\n      if (instanceId === -1 || instanceId > parent.count) return; // calculate the world matrix for each instance\n\n      parent.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n      _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n      _mesh.matrixWorld = _instanceWorldMatrix;\n\n      _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n      for (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n        var intersect = _instanceIntersects[i];\n        intersect.instanceId = instanceId;\n        intersect.object = this;\n        intersects.push(intersect);\n      }\n\n      _instanceIntersects.length = 0;\n    }\n  }, {\n    key: \"geometry\",\n    get: function get() {\n      var _this$instance$curren;\n\n      return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n    }\n  }]);\n\n  return Position;\n}(THREE.Group);\n\nexport { Position };","map":{"version":3,"sources":["/Users/riandasilva/vetreria/node_modules/@react-three/drei/helpers/Position.js"],"names":["THREE","_instanceLocalMatrix","Matrix4","_instanceWorldMatrix","_instanceIntersects","_mesh","Mesh","Position","color","Color","instance","current","undefined","instanceKey","raycaster","intersects","parent","geometry","material","matrixWorld","instanceId","userData","instances","indexOf","count","getMatrixAt","multiplyMatrices","raycast","i","l","length","intersect","object","push","_this$instance$curren","Group"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,IAAMC,oBAAoB,GAAG,aAAa,IAAID,KAAK,CAACE,OAAV,EAA1C;;AAEA,IAAMC,oBAAoB,GAAG,aAAa,IAAIH,KAAK,CAACE,OAAV,EAA1C;;AAEA,IAAME,mBAAmB,GAAG,EAA5B;;AAEA,IAAMC,KAAK,GAAG,aAAa,IAAIL,KAAK,CAACM,IAAV,EAA3B;;IAEMC,Q;;;;;AACJ,sBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa,IAAIR,KAAK,CAACS,KAAV,CAAgB,OAAhB,CAAb;AACA,UAAKC,QAAL,GAAgB;AACdC,MAAAA,OAAO,EAAEC;AADK,KAAhB;AAGA,UAAKC,WAAL,GAAmB;AACjBF,MAAAA,OAAO,EAAEC;AADQ,KAAnB;AANY;AASb,G,CAAC;;;;;AAOA;4BAGME,S,EAAWC,U,EAAY;AAC7B,UAAMC,MAAM,GAAG,KAAKN,QAAL,CAAcC,OAA7B;AACA,UAAI,CAACK,MAAL,EAAa;AACb,UAAI,CAACA,MAAM,CAACC,QAAR,IAAoB,CAACD,MAAM,CAACE,QAAhC,EAA0C;AAC1Cb,MAAAA,KAAK,CAACY,QAAN,GAAiBD,MAAM,CAACC,QAAxB;AACA,UAAME,WAAW,GAAGH,MAAM,CAACG,WAA3B;AACA,UAAIC,UAAU,GAAGJ,MAAM,CAACK,QAAP,CAAgBC,SAAhB,CAA0BC,OAA1B,CAAkC,KAAKV,WAAvC,CAAjB,CAN6B,CAMyC;;AAEtE,UAAIO,UAAU,KAAK,CAAC,CAAhB,IAAqBA,UAAU,GAAGJ,MAAM,CAACQ,KAA7C,EAAoD,OARvB,CAQ+B;;AAE5DR,MAAAA,MAAM,CAACS,WAAP,CAAmBL,UAAnB,EAA+BnB,oBAA/B;;AAEAE,MAAAA,oBAAoB,CAACuB,gBAArB,CAAsCP,WAAtC,EAAmDlB,oBAAnD,EAZ6B,CAY6C;;;AAG1EI,MAAAA,KAAK,CAACc,WAAN,GAAoBhB,oBAApB;;AAEAE,MAAAA,KAAK,CAACsB,OAAN,CAAcb,SAAd,EAAyBV,mBAAzB,EAjB6B,CAiBkB;;;AAG/C,WAAK,IAAIwB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGzB,mBAAmB,CAAC0B,MAAxC,EAAgDF,CAAC,GAAGC,CAApD,EAAuDD,CAAC,EAAxD,EAA4D;AAC1D,YAAMG,SAAS,GAAG3B,mBAAmB,CAACwB,CAAD,CAArC;AACAG,QAAAA,SAAS,CAACX,UAAV,GAAuBA,UAAvB;AACAW,QAAAA,SAAS,CAACC,MAAV,GAAmB,IAAnB;AACAjB,QAAAA,UAAU,CAACkB,IAAX,CAAgBF,SAAhB;AACD;;AAED3B,MAAAA,mBAAmB,CAAC0B,MAApB,GAA6B,CAA7B;AACD;;;wBAnCc;AACb,UAAII,qBAAJ;;AAEA,aAAO,CAACA,qBAAqB,GAAG,KAAKxB,QAAL,CAAcC,OAAvC,KAAmD,IAAnD,GAA0D,KAAK,CAA/D,GAAmEuB,qBAAqB,CAACjB,QAAhG;AACD;;;;EAjBoBjB,KAAK,CAACmC,K;;AAoD7B,SAAS5B,QAAT","sourcesContent":["import * as THREE from 'three';\n\nconst _instanceLocalMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceWorldMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/new THREE.Mesh();\n\nclass Position extends THREE.Group {\n  constructor() {\n    super();\n    this.color = new THREE.Color('white');\n    this.instance = {\n      current: undefined\n    };\n    this.instanceKey = {\n      current: undefined\n    };\n  } // This will allow the virtual instance have bounds\n\n\n  get geometry() {\n    var _this$instance$curren;\n\n    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n  } // And this will allow the virtual instance to receive events\n\n\n  raycast(raycaster, intersects) {\n    const parent = this.instance.current;\n    if (!parent) return;\n    if (!parent.geometry || !parent.material) return;\n    _mesh.geometry = parent.geometry;\n    const matrixWorld = parent.matrixWorld;\n    let instanceId = parent.userData.instances.indexOf(this.instanceKey); // If the instance wasn't found or exceeds the parents draw range, bail out\n\n    if (instanceId === -1 || instanceId > parent.count) return; // calculate the world matrix for each instance\n\n    parent.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n    _mesh.matrixWorld = _instanceWorldMatrix;\n\n    _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n      const intersect = _instanceIntersects[i];\n      intersect.instanceId = instanceId;\n      intersect.object = this;\n      intersects.push(intersect);\n    }\n\n    _instanceIntersects.length = 0;\n  }\n\n}\n\nexport { Position };\n"]},"metadata":{},"sourceType":"module"}